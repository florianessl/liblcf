{#
This template generates the sources (*.cpp) for all the chunks in the "rpg" folder.
These are files for chunks like Actor, Class and Event.
-#}
{% include "copyright.tmpl" %}
// Headers
#include "lcf/rpg/{{ filename }}.h"

namespace lcf {
namespace rpg {
{%- for field in fields[struct_name]|field_is_used %}
{%- if not field.size %}
{%- if field.type.endswith("_Flags") %}

std::ostream& operator<<(std::ostream& os, const {{ struct_name }}::{{ field.type }}& obj) {
	for (size_t i = 0; i < obj.flags.size(); ++i) {
		os << (i == 0 ? "[" : ", ") << obj.flags[i];
	}
	os << "]";
	return os;
}
{%- endif %}
{%- endif %}
{%- endfor %}

std::ostream& operator<<(std::ostream& os, const {{ struct_name }}& obj) {
	os << "{{ struct_name }}{";
{%- for field in fields[struct_name]|field_is_used|field_is_not_size -%}
	{% if loop.first %}
	os << "{{ field.name }}="
	{%- else %}
	os << ", {{ field.name }}="
	{%- endif -%}
	{%- if field.type is is_array -%}
	;
	for (size_t i = 0; i < obj.{{ field.name }}.size(); ++i) {
		os << (i == 0 ? "[" : ", ") << obj.{{ field.name }}[i];
	}
	os << "]";
	{%- else -%}
	<< obj.{{ field.name }};
	{%- endif %}
{%- endfor %}
	os << "}";
	return os;
}

} // namespace rpg
} // namespace lcf
