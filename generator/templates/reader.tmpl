{#
This template generates the source files for the metadata of the chunk readers.
Files generated are "ldb/lmu/lsd/lmt_*.cpp"
-#}
{% include "copyright.tmpl" %}
// Headers
#include "lcf/{{ type }}/reader.h"
#include "lcf/{{ type }}/chunks.h"
#include "reader_struct_impl.h"

namespace lcf {

// Read {{ struct_name }}.
{%- set LCF_CHUNK_SUFFIX = type|upper + "_Reader" %}
{%- set LCF_CURRENT_STRUCT = struct_name %}

template <>
char const* const Struct<rpg::{{ LCF_CURRENT_STRUCT }}>::name = "{{ LCF_CURRENT_STRUCT }}";

{%- for field in fields[struct_base]|field_is_written|list + fields[struct_name]|field_is_written|list %}
{%- if field|lcf_type in ["Typed", "DatabaseVersion"] %}
{%- if field.type.endswith("_Flags") %}
static {{ field|lcf_type }}Field<rpg::{{ LCF_CURRENT_STRUCT }}, rpg::{{ LCF_CURRENT_STRUCT }}::{{ field.type }}> static_{{ field.name }}(
{%- else %}
static {{ field|lcf_type }}Field<rpg::{{ LCF_CURRENT_STRUCT }}, {{ field.type|cpp_type }}> static_{{ field.name }}(
{%- endif %}
	&rpg::{{ LCF_CURRENT_STRUCT }}::{{ field.name }},
	{{ LCF_CHUNK_SUFFIX }}::Chunk{{ LCF_CURRENT_STRUCT }}::{{ field.name }},
	"{{ field.name }}",
	{{field.presentifdefault}},
	{{field.is2k3}}
);
{%- elif field|lcf_type in ["Empty"] %}
static {{ field|lcf_type }}Field<rpg::{{ LCF_CURRENT_STRUCT }}> static_{{ field.name }}(
	{{ LCF_CHUNK_SUFFIX }}::Chunk{{ LCF_CURRENT_STRUCT }}::{{ field.name }},
	"{{ field.name }}",
	{{field.presentifdefault}},
	{{field.is2k3}}
);
{%- elif field|lcf_type in ["Size", "Count"] %}
static {{ field|lcf_type }}Field<rpg::{{ LCF_CURRENT_STRUCT }}, {{ field.type|cpp_type }}> static_size_{{ field.name }}(
	&rpg::{{ LCF_CURRENT_STRUCT }}::{{ field.name }},
	{{ LCF_CHUNK_SUFFIX }}::Chunk{{ LCF_CURRENT_STRUCT }}::{{ field.name }}_size,
	{{field.presentifdefault}},
	{{field.is2k3}}
);
{%- endif %}
{%- endfor %}


template <>
Field<rpg::{{ LCF_CURRENT_STRUCT }}> const* Struct<rpg::{{ LCF_CURRENT_STRUCT }}>::fields[] = {
{%- for field in fields[struct_base]|field_is_written|list + fields[struct_name]|field_is_written|list %}
	{%- if field|lcf_type in ["Typed", "DatabaseVersion", "Empty"] %}
	&static_{{ field.name }},
	{%- elif field|lcf_type in ["Size", "Count"] %}
	&static_size_{{ field.name }},
	{%- endif %}
{%- endfor %}
	NULL
};

template class Struct<rpg::{{ LCF_CURRENT_STRUCT }}>;

} //namespace lcf
